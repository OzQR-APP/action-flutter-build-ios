name: flutter-build-ios
description: Setups the environment to build iOS apps with Flutter
branding:
  icon: box
  color: green

inputs:
  working-directory:
    description: The root directory of the Flutter app within this repository
    default: ./
  build-cmd:
    description: The full build command, can be used to add arguments
    default: flutter build ipa --release
  flutterfire:
    description: "Whether this project uses flutterfire, this is needed because flutterfire cli adds a post build script..."
    required: false
    default: "true" # we'll setup flutter fire just in case
  certificate-base64:
    description: "Base64 of the p12 certificate"
    required: true
  certificate-password:
    description: "Password of the above certificate"
    required: true
  provisioning-profile-base64:
    description: "Base64 of the primary .mobileprovision file"
    required: true
  one-signal-provisioning-profile-base64:
    description: "Base64 of the OneSignal .mobileprovision file"
    required: true
  keychain-password:
    description: "Random string in secrets"
    required: true

runs:
  using: "composite"
  steps:
    - name: xcode version
      run: /usr/bin/xcodebuild -version
      shell: bash

    - name: Check flutter found
      id: check_flutter
      shell: bash
      run: |
        if flutter --version; then
            echo "installed=true" >> "$GITHUB_OUTPUT"
        else
            echo "installed=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Setup flutter
      if: steps.check_flutter.outputs.installed == 'false'
      uses: subosito/flutter-action@v2
      with:
        channel: "stable"
        cache: true

    - name: Install the Apple certificate and provisioning profiles
      shell: bash
      env:
        IOS_BUILD_CERTIFICATE_BASE64: ${{ inputs.certificate-base64 }}
        IOS_BUILD_CERTIFICATE_PASSWORD: ${{ inputs.certificate-password }}
        IOS_MOBILE_PROVISIONING_PROFILE_BASE64: ${{ inputs.provisioning-profile-base64 }}
        IOS_ONE_SIGNAL_PROVISIONING_PROFILE_BASE64: ${{ inputs.one-signal-provisioning-profile-base64 }}
        IOS_GITHUB_KEYCHAIN_PASSWORD: ${{ inputs.keychain-password }}
      run: |
        # Paths for certificate and provisioning profiles
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        MAIN_PP_PATH=$RUNNER_TEMP/main.mobileprovision
        ONESIGNAL_PP_PATH=$RUNNER_TEMP/onesignal.mobileprovision

        # Import certificate and provisioning profiles from secrets
        echo -n "$IOS_BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$IOS_MOBILE_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $MAIN_PP_PATH
        echo -n "$IOS_ONE_SIGNAL_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $ONESIGNAL_PP_PATH

        # Create temporary keychain
        security create-keychain -p "$IOS_GITHUB_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$IOS_GITHUB_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$IOS_BUILD_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        security find-identity -v

        # Use UUID for the main app's provisioning profile
        MAIN_UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< $(/usr/bin/security cms -D -i $MAIN_PP_PATH))
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $MAIN_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$MAIN_UUID.mobileprovision

        # Use UUID for the OneSignal provisioning profile
        ONESIGNAL_UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< $(/usr/bin/security cms -D -i $ONESIGNAL_PP_PATH))
        cp $ONESIGNAL_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$ONESIGNAL_UUID.mobileprovision

    - name: List installed provisioning profiles
      run: cd ~/Library/MobileDevice/Provisioning\ Profiles && ls
      shell: bash

    - name: Build
      run: ${{ inputs.build-cmd }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
